/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

uint32_t angle = 0;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
uint8_t buffrec[7];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_ADC1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
static void Dynamixel_SetAngle(double angle);
static void Dynamixel_Transmit(void);
static void Dynamixel_Receive(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_USART3_UART_Init();
  MX_ADC1_Init();

  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_ADC1_CLK_ENABLE();
  __HAL_ADC_ENABLE(&hadc1);

  GPIO_InitTypeDef Data_Control;
  Data_Control.Pin = GPIO_PIN_15;
  Data_Control.Mode = GPIO_MODE_OUTPUT_PP;
  Data_Control.Speed = GPIO_SPEED_FREQ_LOW;
  Data_Control.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &Data_Control);

  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  HAL_ADC_Start(&hadc1);

  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE); // UART receive interrupt
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC); // UART transmit interrupt
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  // Receive analog input from pin PA3 to convert into an angular position
	  /*if(HAL_ADC_PollForConversion(&hadc1, 500) == HAL_OK){
		  // Scale ADC value to the angular bounds of the motor
		  angle = HAL_ADC_GetValue(&hadc1) / 4096 * 300;
	  }*/
	  //else{
		  if(angle == 0){
			  angle = 300;
		  }
		  else{
			  angle = 0;
		  }
	  //}

	  Dynamixel_SetAngle(angle);
	  Dynamixel_Receive();
	  //HAL_UART_Receive(&huart6, buffrec, 7, 100); // Receive 7 bytes
	  //HAL_UART_Transmit(&huart3, buffrec, 7, 100); // Send received bytes via UART3 TX

	  HAL_Delay(1500); // Delay for motor to move to the specified position

	  Dynamixel_SetAngle(angle);
	  Dynamixel_Receive();
	  //HAL_UART_Receive(&huart6, buffrec, 7, 100); // Receive 7 bytes
	  //HAL_UART_Transmit(&huart3, buffrec, 7, 100); // Send received bytes via UART3 TX

	  HAL_Delay(1500); // Delay for motor to move to the specified position
  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USART6 init function */
static void MX_USART6_UART_Init(void)
{

  huart6.Instance = USART6;
  huart6.Init.BaudRate = 1000000;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
static void Dynamixel_SetAngle(double angle)
{
	/* Takes a double between 0 and 300, encodes this position in an
	 * upper and low hex byte pair (with a maximum of 1023 as defined in the AX-12
	 * user manual), and sends this information (along with requisites) over UART
	 */
	uint8_t Dynamixel_Requisites[5] = {0xff, 0xff, 0xfe, 0x05, 0x03}; // Obligatory bytes for setting angle

	uint8_t reg_Goal_Position[1] = {0x1e}; // Address of goal position
	uint8_t reg_Angle_Low_Byte[1]; // Low byte of goal position // Test case 1: 0xfe | Test case 2: 0xfd
	uint8_t reg_Angle_High_Byte[1]; // High byte of goal position // Test case 1: 0x00 | Test case 2: 0x01
	uint8_t Checksum[1]; // check sum = 255 - (sum % 256)

	// Do computations
	int normalized_value = (int)(angle / 300 * 1023); // maximum angle of 1023
	reg_Angle_Low_Byte[0] = normalized_value & 0xFF;
	reg_Angle_High_Byte[0] = (normalized_value >> 8) & 0xFF;

	Checksum[0] = 255 - ((Dynamixel_Requisites[2]
						+ Dynamixel_Requisites[3]
						+ Dynamixel_Requisites[4]
						+ reg_Goal_Position[0]
						+ reg_Angle_Low_Byte[0]
						+ reg_Angle_High_Byte[0]
						) % 256);

	// Set data direction
	Dynamixel_Transmit();

	// Transmit
	HAL_UART_Transmit(&huart6, Dynamixel_Requisites, 5, 100);
	HAL_UART_Transmit(&huart6, reg_Goal_Position, 1, 100);
	HAL_UART_Transmit(&huart6, reg_Angle_Low_Byte, 1, 100);
	HAL_UART_Transmit(&huart6, reg_Angle_High_Byte, 1, 100);
	HAL_UART_Transmit(&huart6, Checksum, 1, 100);
}

static void Dynamixel_SetBaudRate(double baud){
	/* Function to set baud rate */

	uint8_t Dynamixel_Requisites[5] = {0xff, 0xff, 0xfe, 0x04, 0x03}; // Obligatory bytes for setting baud rate
	uint8_t reg_Baud_Rate[1] = {0x04}; // Baud rate register address
	uint8_t Checksum[1]; // check sum = 255 - (sum % 256)
	uint8_t _baud[1]; // The hex code corresponding to the desired baud rate

	// Do computations
	if(baud == 9600){
		_baud[0] = 0xCF;
	}
	else{
		// 1 Mbps
		_baud[0] = 0x01;
	}

	Checksum[0] = 255 - ((Dynamixel_Requisites[2]
						+ Dynamixel_Requisites[3]
						+ Dynamixel_Requisites[4]
						+ reg_Baud_Rate[0]
						+ _baud[0]
						) % 256);

	// Set data direction
	Dynamixel_Transmit();

	// Transmit
	HAL_UART_Transmit(&huart6, Dynamixel_Requisites, 5, 100);
	HAL_UART_Transmit(&huart6, reg_Baud_Rate, 1, 100);
	HAL_UART_Transmit(&huart6, _baud, 1, 100);
	HAL_UART_Transmit(&huart6, Checksum, 1, 100);
}

static void Dynamixel_SetID(int ID){
	/* Set motor ID */

	uint8_t Dynamixel_Requisites[5] = {0xff, 0xff, 0xfe, 0x04, 0x03}; // Obligatory bytes for setting baud rate
	uint8_t reg_ID[1] = {0x03}; // ID register address
	uint8_t Checksum[1]; // check sum = 255 - (sum % 256)

	// Do computations
	Checksum[0] = 255 - ((Dynamixel_Requisites[2]
						+ Dynamixel_Requisites[3]
						+ Dynamixel_Requisites[4]
						+ reg_ID[0]
						) % 256);

	// Set data direction
	Dynamixel_Transmit();

	// Transmit
	HAL_UART_Transmit(&huart6, Dynamixel_Requisites, 5, 100);
	HAL_UART_Transmit(&huart6, reg_ID, 1, 100);
	HAL_UART_Transmit(&huart6, &ID, 1, 100);
	HAL_UART_Transmit(&huart6, Checksum, 1, 100);
}

static void Dynamixel_Transmit(void){
	/* Sets the serial data direction to transmit */

	/* THIS SHOULD BE A MACRO */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 1); // Switch to TX
}

static void Dynamixel_Receive(void){
	/* Receives 7 bytes from the Dynamixel AX-12 and transmits them over a separate UART interface
	 *
	 * Sets the serial data direction to receive. Actual receive and transmit are
	 * handled in the UART6 ISR.
	 */

	/* THIS SHOULD BE A MACRO */
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, 0); // Switch to RX
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
