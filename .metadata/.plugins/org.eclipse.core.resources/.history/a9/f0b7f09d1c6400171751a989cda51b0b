/***** Includes *****/
#include "Dynamixel_AX-12A.h"

/***** Functions *****/
static void Dynamixel_Init(Dynamixel_HandleTypeDef *hdynamixel, uint8_t ID, uint32_t BaudRate){
	hdynamixel -> _ID = ID;
	hdynamixel -> _BaudRate = BaudRate;
}

static void Dynamixel_SetAngle(Dynamixel_HandleTypeDef *hdynamixel, double angle)
{
	/* Takes a double between 0 and 300, encodes this position in an
	 * upper and low hex byte pair (with a maximum of 1023 as defined in the AX-12
	 * user manual), and sends this information (along with requisites) over UART
	 */

	// Definition array to be transmitted
	uint8_t arrTransmit[9];

	// Do assignments and computations
	arrTransmit[0] = 0xff; // Obligatory bytes for starting communication
	arrTransmit[1] = 0xff; // Obligatory bytes for starting communication
	arrTransmit[2] = hdynamixel -> _ID; // Motor ID
	arrTransmit[3] = 0x05; // Length of message minus the obligatory bytes
	arrTransmit[4] = 0x03; // WRITE instruction
	arrTransmit[5] = 0x1e; // Address of goal position

	// Translate the angle from degrees into a 10-bit number
	int normalized_value = (int)(angle / 300 * 1023); // maximum angle of 1023
	arrTransmit[6] = normalized_value & 0xFF; // Low byte of goal position
	arrTransmit[7] = (normalized_value >> 8) & 0xFF; // High byte of goal position

	// Checksum
	arrTransmit[8] = 255 - ((arrTransmit[2]
						+ arrTransmit[3]
						+ arrTransmit[4]
						+ arrTransmit[5]
						+ arrTransmit[6]
						+ arrTransmit[7]
						) % 256);

	// Set data direction
	__DYNAMIXEL_TRANSMIT();

	// Transmit
	HAL_UART_Transmit(&huart6, arrTransmit, 9, 100);
}

static void Dynamixel_SetBaudRate(Dynamixel_HandleTypeDef *hdynamixel, double baud){
	/* Set baud rate of a particular motor */

	uint8_t arrTransmit[8];
	uint32_t = _baud;

	// Do assignments and computations
	arrTransmit[0] = 0xff; // Obligatory bytes for starting communication
	arrTransmit[1] = 0xff; // Obligatory bytes for starting communication
	arrTransmit[2] = hdynamixel -> _ID; // Motor ID
	arrTransmit[3] = 0x04; // Length of message minus the obligatory bytes
	arrTransmit[4] = 0x03; // WRITE instruction
	arrTransmit[5] = 0x04; // Baud rate register address

	if(baud == 9600){
		_baud = 0xCF;
	}
	else{
		// 1 Mbps
		_baud = 0x01;
	}
	arrTransmit[6] = _baud; // The hex code corresponding to the desired baud rate

	// Checksum = 255 - (sum % 256)
	arrTransmit[7] = 255 - ((arrTransmit[2]
						+ arrTransmit[3]
						+ arrTransmit[4]
						+ arrTransmit[5]
						+ arrTransmit[6]
						) % 256);

	// Set data direction
	Dynamixel_Transmit();

	// Transmit
	HAL_UART_Transmit(&huart6, Dynamixel_Requisites, 5, 100);
	HAL_UART_Transmit(&huart6, reg_Baud_Rate, 1, 100);
	HAL_UART_Transmit(&huart6, _baud, 1, 100);
	HAL_UART_Transmit(&huart6, Checksum, 1, 100);
}

static void Dynamixel_SetID(Dynamixel_HandleTypeDef *hdynamixel, int ID){
	/* Set motor ID */

	uint8_t Dynamixel_Requisites[5] = {0xff, 0xff, 0xfe, 0x04, 0x03}; // Obligatory bytes for setting baud rate
	uint8_t reg_ID[1] = {0x03}; // ID register address
	uint8_t Checksum[1]; // check sum = 255 - (sum % 256)
	uint8_t _ID[1]; // Array to hold ID so it can be tranmitted over UART

	// Do computations
	Checksum[0] = 255 - ((Dynamixel_Requisites[2]
						+ Dynamixel_Requisites[3]
						+ Dynamixel_Requisites[4]
						+ reg_ID[0]
						) % 256);

	// Set data direction
	Dynamixel_Transmit();

	// Transmit
	HAL_UART_Transmit(&huart6, Dynamixel_Requisites, 5, 100);
	HAL_UART_Transmit(&huart6, reg_ID, 1, 100);
	HAL_UART_Transmit(&huart6, _ID, 1, 100);
	HAL_UART_Transmit(&huart6, Checksum, 1, 100);
}
